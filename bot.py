import os
import json
import logging
from functools import wraps
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from flask import Flask, request

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–Ω–∏–µ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)

@app.route('/')
def home():
    return "I'm alive!"  # –≠—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç UptimeRobot

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
DATA_FILE = 'db.json'
PHOTO_DIR = 'photos'

ALLOWED_USERS = []
for key, value in os.environ.items():
    if key.startswith("user_"):
        user_id = int(value)
        ALLOWED_USERS.append(user_id)

TOKEN = os.getenv("BOT_TOKEN")
print(TOKEN[:5])
print(ALLOWED_USERS)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
WAITING_FOR_NUMBER, WAITING_FOR_PHOTO = range(2)

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–Ω–æ–ø–æ–∫
MAIN_MENU = ReplyKeyboardMarkup(
    [
        ['–ö–∞–∫–æ–π –Ω–æ–º–µ—Ä —Å–µ–π—á–∞—Å –∏—â–µ–º?', '–ü–æ—Å–ª–µ–¥–Ω–∏–π –Ω–æ–º–µ—Ä'],
        ['–í—Å–µ –Ω–æ–º–µ—Ä–∞', '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä']
    ],
    resize_keyboard=True
)

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
if not os.path.exists(PHOTO_DIR):
    os.makedirs(PHOTO_DIR)

if not os.path.exists(DATA_FILE):
    with open(DATA_FILE, 'w') as f:
        json.dump({'current_number': 1}, f)

# –£—Ç–∏–ª–∏—Ç—ã
def get_current_number():
    with open(DATA_FILE) as f:
        return json.load(f)['current_number']

def set_current_number(num):
    with open(DATA_FILE, 'w') as f:
        json.dump({"current_number": num}, f)

def get_photo_path(number):
    return os.path.join(PHOTO_DIR, f"{number:03d}.jpg")

def get_all_photos():
    return sorted(
        [
            f for f in os.listdir(PHOTO_DIR)
            if f.endswith('.jpg')
        ]
    )

def is_allowed(user_id):
    return user_id in ALLOWED_USERS

def allowed_user_only(func):
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not is_allowed(user_id):
            await update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            print('User_id: ', update.message.from_user.id)
            return ConversationHandler.END
        return await func(update, context)
    return wrapper

# –ö–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏
@allowed_user_only
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞. \n –°–µ–π—á–∞—Å –Ω—É–∂–µ–Ω –Ω–æ–º–µ—Ä: {get_current_number():03d}",
        reply_markup=MAIN_MENU
    )

@allowed_user_only
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    current_number = get_current_number()

    if text == "–ö–∞–∫–æ–π –Ω–æ–º–µ—Ä —Å–µ–π—á–∞—Å –∏—â–µ–º?":
        await update.message.reply_text(f"üìå –°–µ–π—á–∞—Å –Ω—É–∂–µ–Ω –Ω–æ–º–µ—Ä: {current_number:03d}")
        return None

    elif text == "–ü–æ—Å–ª–µ–¥–Ω–∏–π –Ω–æ–º–µ—Ä":
        if current_number == 1:
            await update.message.reply_text("‚ùó_
