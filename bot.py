import os
import json
from functools import wraps
from datetime import datetime
from os import makedirs

from telegram import Update, ForceReply, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, \
    CallbackContext
from flask import Flask, request
import logging

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–Ω–∏–µ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)

@app.route('/')
def home():
    return "I'm alive!"  # –≠—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç UptimeRobot

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
DATA_FILE = 'db.json'
PHOTO_DIR = 'photos'

ALLOWED_USERS = []
for key, value in os.environ.items():
    if key.startswith("user_"):
        user_id = int(value)
        ALLOWED_USERS.append(user_id)

TOKEN = os.getenv("BOT_TOKEN")
print(TOKEN[:5])
print(ALLOWED_USERS)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
WAITING_FOR_NUMBER, WAITING_FOR_PHOTO = range(2)

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–Ω–æ–ø–æ–∫
MAIN_MENU = ReplyKeyboardMarkup(
    [
        ['–ö–∞–∫–æ–π –Ω–æ–º–µ—Ä —Å–µ–π—á–∞—Å –∏—â–µ–º?', '–ü–æ—Å–ª–µ–¥–Ω–∏–π –Ω–æ–º–µ—Ä'],
        ['–í—Å–µ –Ω–æ–º–µ—Ä–∞', '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä']
    ],
    resize_keyboard=True
)

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
if not os.path.exists(PHOTO_DIR):
    os.makedirs(PHOTO_DIR)

if not os.path.exists(DATA_FILE):
    with open(DATA_FILE, 'w') as f:
        json.dump({'current_number': 1}, f)

# –£—Ç–∏–ª–∏—Ç—ã
def get_current_number():
    with open(DATA_FILE) as f:
        return json.load(f)['current_number']

def set_current_number(num):
    with open(DATA_FILE, 'w') as f:
        json.dump({"current_number": num}, f)

def get_photo_path(number):
    return os.path.join(PHOTO_DIR, f"{number:03d}.jpg")

def get_all_photos():
    return sorted(
        [
            f for f in os.listdir(PHOTO_DIR)
            if f.endswith('.jpg')
        ]
    )

def is_allowed(user_id):
    return user_id in ALLOWED_USERS

def allowed_user_only(func):
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not is_allowed(user_id):
            await update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            print('User_id: ', update.message.from_user.id)
            return ConversationHandler.END
        return await func(update, context)
    return wrapper

# –ö–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏
@allowed_user_only
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞. \n –°–µ–π—á–∞—Å –Ω—É–∂–µ–Ω –Ω–æ–º–µ—Ä: {get_current_number():03d}",
        reply_markup=MAIN_MENU
    )

@allowed_user_only
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    current_number = get_current_number()

    if text == "–ö–∞–∫–æ–π –Ω–æ–º–µ—Ä —Å–µ–π—á–∞—Å –∏—â–µ–º?":
        await update.message.reply_text(f"üìå –°–µ–π—á–∞—Å –Ω—É–∂–µ–Ω –Ω–æ–º–µ—Ä: {current_number:03d}")
        return None

    elif text == "–ü–æ—Å–ª–µ–¥–Ω–∏–π –Ω–æ–º–µ—Ä":
        if current_number == 1:
            await update.message.reply_text("‚ùó –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞.")
            return None
        else:
            path = get_photo_path(current_number - 1)
            if os.path.exists(path):
                await update.message.reply_photo(photo=open(path, 'rb'), caption=f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –Ω–æ–º–µ—Ä: {current_number-1:03d}")
                return None
            else:
                await update.message.reply_text("‚ö†Ô∏è –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return None

    elif text == "–í—Å–µ –Ω–æ–º–µ—Ä–∞":
        photos = get_all_photos()
        if not photos:
            await update.message.reply_text("üìÇ –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ.")
            return None
        else:
            for file in photos:
                path = os.path.join(PHOTO_DIR, file)
                await update.message.reply_photo(photo=open(path, 'rb'), caption=f"–ù–æ–º–µ—Ä: {file[:3]}")

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ (–Ω–æ–º–µ—Ä ‚Üí —Ñ–æ—Ç–æ) ---
@allowed_user_only
async def begin_add_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìù –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å:")
    return WAITING_FOR_NUMBER

@allowed_user_only
async def handle_add_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not text.isdigit():
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 007)")
        return WAITING_FOR_NUMBER

    context.user_data["submitted_number"] = int(text)
    await update.message.reply_text("üì∑ –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞")
    return WAITING_FOR_PHOTO

@allowed_user_only
async def handle_add_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    submitted_number = context.user_data.get("submitted_number")
    if not submitted_number:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä")
        return ConversationHandler.END

    photo_file = await update.message.photo[-1].get_file()
    file_path = get_photo_path(submitted_number)
    await photo_file.download_to_drive(file_path)

    current = get_current_number()
    if submitted_number == current:
        next_number = current + 1
        set_current_number(next_number)

        # –†–∞—Å—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã–º
        for user_id in ALLOWED_USERS:
            if user_id != update.effective_user.id:
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=f"‚úÖ –ù–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä {submitted_number:03d}\n‚û°Ô∏è –¢–µ–ø–µ—Ä—å –∏—â–µ–º {next_number:03d}"
                    )
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")

    await update.message.reply_text(f"‚úÖ –ù–æ–º–µ—Ä {submitted_number:03d} –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=MAIN_MENU)
    return ConversationHandler.END

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –∏ –∑–∞–ø—É—Å–∫ Flask
def main():
    print("main_start")
    TOKEN = os.getenv("BOT_TOKEN")  # ‚Üê –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–æ–∫–µ–Ω
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))

    app.add_handler(MessageHandler(
        filters.Regex("^(–ö–∞–∫–æ–π –Ω–æ–º–µ—Ä —Å–µ–π—á–∞—Å –∏—â–µ–º\\?|–ü–æ—Å–ª–µ–¥–Ω–∏–π –Ω–æ–º–µ—Ä|–í—Å–µ –Ω–æ–º–µ—Ä–∞)$"),
        handle_buttons
    ))

    conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä$"), begin_add_number)],
        states={
            WAITING_FOR_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_add_number)],
            WAITING_FOR_PHOTO: [MessageHandler(filters.PHOTO, handle_add_photo)],
        },
        fallbacks=[]
    )
    app.add_handler(conv)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    webhook_url = os.getenv("WEBHOOK_URL")  # URL, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π Telegram –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    app.bot.setWebhook(webhook_url)

    app.run_polling()  # –ù–æ –≤ —Å–ª—É—á–∞–µ —Å Flask, –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º webhook, —Ç–∞–∫ —á—Ç–æ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram —á–µ—Ä–µ–∑ webhook
@app.route('/' + TOKEN, methods=['POST'])
def webhook():
    update = request.get_json()
    app.bot.process_new_updates([Update.de_json(update, app.bot)])
    return '', 200

if __name__ == "__main__":
    main()
    app.run(host="0.0.0.0", port=8080)  # Render —Å–ª—É—à–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 8080
